# Build the documentation on GitHub and publish on GitHub pages
name: ci
on: [push]
permissions:
  contents: write


jobs:
  test-compile:
    name: Test Build on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    env:
      PB_BUILD_TYPE: Release
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            python-version: "3.10"
          - os: windows-latest
            python-version: "3.10"
          - os: macos-12
            python-version: "3.10"
          - os: macos-14
            python-version: "3.10"
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up MSVC
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
      - name: MacOS install BOOST and LIBOMP
        if: runner.os == 'macOS'
        run: |
          brew install libomp
          brew info libomp
          brew install boost@1.85
          brew info boost
          clang --version
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies for Pybinding
        run: python -m pip install wheel scipy matplotlib==3.9.0 pytest cmake ninja
      - name: Build with CMake and test Python / C++
        timeout-minutes: 30
        run: |
          mkdir build_tests
          cd build_tests
          cmake ..
          cmake --build . -j --target kitecore --config Release
          cd ..
      - name: Test Python
        run: python -c "import pybinding as pb; exit(pb.tests())"

  build-wheels:
    name: Build wheels on ${{ matrix.os }} for ${{ matrix.arch }} and Python ${{ matrix.python-version }}
    environment: actions
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop'
    needs: [ test-compile ]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            options: ""
            arch: x86_64
            python-version: "3.10"
          - os: windows-latest
            options: ""
            arch: x86_64
            python-version: "3.10"
          - os: macos-12
            arch: x86_64
            options: "/usr/local/Cellar/boost/1.85.0;/opt/homebrew/opt/libomp"
            python-version: "3.10"
          - os: macos-14
            arch: arm64
            options: "/usr/local/Cellar/boost/1.85.0;/opt/homebrew/opt/libomp"
            python-version: "3.10"
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel
      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_ARCHS_MACOS: ${{ matrix.arch }}
          CIBW_ARCHS_LINUX: x86_64
          CIBW_BEFORE_ALL_MACOS: |
            pip install scipy contourpy --prefer-binary
            brew install libomp
            brew info libomp
            brew install boost@1.85
            brew info boost
            clang --version
          # CIBW_ENVIRONMENT:
          #   CC="/usr/local/bin/gcc-13"
          #   CXX="/usr/local/bin/g++-13"
          #   OSX_ARCH=${{ matrix.cibw_archs }}
          #   OSX_FLAGS=' -arch ${{ matrix.arch }} -O3' # set compiler, don't use AppleClang
          CIBW_ENVIRONMENT: >
            QK_CMAKE_PREFIX_PATH=${{ matrix.options }}
          CIBW_BUILD_VERBOSITY: 1
          CIBW_BEFORE_TEST: pip install scipy contourpy h5py pybinding-dev --prefer-binary
          CIBW_TEST_REQUIRES: pytest
          CIBW_TEST_COMMAND: python -c "import pybinding as pb; pb.tests(); import kite; exit(kite.tests())"
          CIBW_SKIP: cp36-* cp37-* pp* *win32 *i686 *musllinux* *ppc64le *s390x *aarch64
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ matrix.arch }}-wheels
          path: ./wheelhouse/*.whl

  build-sdist:
    name: Create sources on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    environment: ci
    strategy:
      matrix:
        os: [ ubuntu-latest]
        python-version: [ "3.10" ]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop'
    needs: [ test-compile ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies Quantum-Kite
        run: python -m pip install wheel scipy matplotlib pytest cmake ninja build pybinding-dev
      - name: Build wheel
        run: python -m build --sdist --outdir dist/
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: sources
          path: dist/*.tar.gz

  test-sdist:
    name: Test sources on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    environment: ci
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop'
    needs: [ build-sdist ]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-12, macos-14 ]
        python-version: [ "3.10" ]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Set up MSVC
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Download artefacts
        uses: actions/download-artifact@v4
        with:
          name: sources
          path: dist
      - name: Install Quantum-Kite
        run: |
          python -m pip install wheel scipy matplotlib==3.9.0 pytest cmake ninja build numpy setuptools pybinding-dev
          python -m pip install --find-links=dist quantum-kite --no-binary quantum-kite
      - name: Run tests
        run: python -c "import pybinding as pb; pb.tests(); import kite; exit(kite.tests())"

  merge-artifacts:
    name: Merge all the artifacts
    runs-on: ubuntu-latest
    needs: [ build-wheels, test-sdist ]
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: allfiles
      - name: merge the files
        run: |
          mkdir pythonfiles
          for dir in allfiles/*; do
            if [ -d "$dir" ]; then
              cp -r "$dir"/* pythonfiles/
            fi
          done
      - uses: actions/upload-artifact@v4
        with:
          name: pythonfiles
          path: pythonfiles

  testpypi:
    name: Test upload on PyPi
    environment: actions
    permissions:
      id-token: write
    needs: [ merge-artifacts ]
    runs-on: ubuntu-latest
    steps:
      - name: Download artefacts
        uses: actions/download-artifact@v4
        with:
          name: pythonfiles
          path: dist
      - name: Publish distribution ðŸ“¦ to Test PyPI
        if: (github.ref == 'refs/heads/master') && (github.repository_owner == 'quantum-kite')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/

  pypi:
    name: Publish to PyPi
    environment: ci
    permissions:
      id-token: write
    needs: [ testpypi ]
    runs-on: ubuntu-latest
    steps:
      - name: Download artefacts
        uses: actions/download-artifact@v4
        with:
          name: pythonfiles
          path: dist
      - name: Publish distribution ðŸ“¦ to PyPI
        if: (github.ref == 'refs/heads/master') && (github.repository_owner == 'quantum-kite')
        uses: pypa/gh-action-pypi-publish@release/v1

  deploy:
    name: Make and upload the documentation
    runs-on: ubuntu-latest
    needs: [ test-compile ]
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - run: pip install mkdocs-material mkdocstrings[python]
      - run: mkdocs gh-deploy --force